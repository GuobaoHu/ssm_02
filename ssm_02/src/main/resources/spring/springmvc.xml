<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="                                               
                http://www.springframework.org/schema/beans    
                http://www.springframework.org/schema/beans/spring-beans.xsd    
                http://www.springframework.org/schema/context     
                http://www.springframework.org/schema/context/spring-context.xsd    
                http://www.springframework.org/schema/mvc    
                http://www.springframework.org/schema/mvc/spring-mvc.xsd  
                http://www.springframework.org/schema/tx   
                http://www.springframework.org/schema/tx/spring-tx.xsd  
                http://www.springframework.org/schema/aop  
                http://www.springframework.org/schema/aop/spring-aop.xsd ">

	<!-- 该文件中，需要配置处理器映射器，处理器适配器，处理器(开启包扫描)，视图解析器（其中可以配置jsp文件的前后缀） -->
	<!-- 下面直接使用注解的方式配置映射器和适配器（两者成对，不能一种使用注解，另一种不使用注解） -->
	<!-- conversionService是配置的自定义的参数绑定 -->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

	<!-- 可以解决RESTful格式的前端控制器无法解析静态资源的问题,静态资源解析器,还可以解析css,img等 -->
	<!-- 这种格式出了问题，是因为之前的是对于资源的存储使用的是String[]现在改成了ArrayList<>造成的问题。 -->
	<!-- <mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/> -->
	
	<!-- 如果使用了RESTful形式的拦截，那么对于静态资源的处理上，就需要加上此句，静态资源（没有映射的）就会 -->
    <mvc:default-servlet-handler />
	
	<!-- 自定义的参数绑定类 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.guyue.ssm.controller.conversion.CustomDateConverter"></bean>
			</list>
		</property>
	</bean>

	<!-- 配置处理器，使用注解的方式，和开启bean的包扫描一样，使用时加注解@Controller，表示是处理器 -->
	<context:component-scan base-package="com.guyue.ssm.controller"></context:component-scan>

	<!-- 配置视图解析器,可以配置jsp的前后缀，下面只配置了前缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
	</bean>
	
	<!-- 异常处理器 -->
	<bean class="com.guyue.ssm.Exception.Resolver.CustomExceptionResolver"></bean>
	
	<!-- multipart类型的解析器，可以解析图片 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<!-- 最大上传图片大小，5M -->
			<value>5242880</value>
		</property>
	</bean>
	
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.guyue.ssm.interceptor.HandlerInterceptor1"></bean>
		</mvc:interceptor>
		
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.guyue.ssm.interceptor.HandlerInterceptor2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
</beans>